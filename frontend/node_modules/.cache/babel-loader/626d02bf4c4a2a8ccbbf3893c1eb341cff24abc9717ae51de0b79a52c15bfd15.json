{"ast":null,"code":"import { normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, mergeProps as _mergeProps, createCommentVNode as _createCommentVNode, toHandlers as _toHandlers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _ctx.$slots['input'] ? _renderSlot(_ctx.$slots, \"input\", _normalizeProps(_mergeProps({\n    key: 0\n  }, _ctx.$attrs))) : !_ctx.$slots['input'] ? (_openBlock(), _createElementBlock(\"input\", _mergeProps({\n    key: 1,\n    ref: \"input\"\n  }, _ctx.$attrs, _toHandlers(_ctx.$attrs, true)), null, 16 /* FULL_PROPS */)) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["_ctx","$slots","_renderSlot","_normalizeProps","_mergeProps","key","$attrs","_createElementBlock","ref","_toHandlers"],"sources":["/Users/toby/Documents/GitHub/InsightsInAggieland/frontend/node_modules/vue-google-maps-community-fork/src/components/autocomplete.vue"],"sourcesContent":["<template>\n  <template v-if=\"$slots['input']\">\n    <slot name=\"input\" v-bind=\"$attrs\"></slot>\n  </template>\n  <input v-else-if=\"!$slots['input']\" ref=\"input\" v-bind=\"$attrs\" v-on=\"$attrs\" />\n</template>\n\n<script>\nimport { bindProps, getPropsValues } from '../utils/bindProps.js'\nimport downArrowSimulator from '../utils/simulateArrowDown.js'\nimport { mappedPropsToVueProps } from './build-component'\n\nconst mappedProps = {\n  bounds: {\n    type: Object,\n  },\n  componentRestrictions: {\n    type: Object,\n    // Do not bind -- must check for undefined\n    // in the property\n    noBind: true,\n  },\n  types: {\n    type: Array,\n    default: function () {\n      return []\n    },\n  },\n}\n\nconst props = {\n  selectFirstOnEnter: {\n    required: false,\n    type: Boolean,\n    default: false,\n  },\n  options: {\n    type: Object,\n  },\n}\n\nexport default {\n  mounted() {\n    const _this = this\n    this.$gmapApiPromiseLazy().then(() => {\n      // get correct input from fallback or slot\n      let refInput = _this.$refs.input\n      if (_this.$slots.input) {\n        const refName = _this.$slots.input()[0].props.ref\n        const scopedInput = _this.$slots.input()[0].ref.i.ctx.$refs[refName]\n        if (scopedInput) {\n          refInput = scopedInput.$el.getElementsByTagName('input')[0]\n        }\n      }\n      if (this.selectFirstOnEnter) {\n        downArrowSimulator(refInput)\n      }\n\n      if (typeof google.maps.places.Autocomplete !== 'function') {\n        throw new Error(\n          \"google.maps.places.Autocomplete is undefined. Did you add 'places' to libraries when loading Google Maps?\"\n        )\n      }\n\n      /* eslint-disable no-unused-vars */\n      const finalOptions = {\n        ...getPropsValues(this, mappedProps),\n        ...this.options,\n      }\n\n      this.$autocomplete = new google.maps.places.Autocomplete(refInput, finalOptions)\n      bindProps(this, this.$autocomplete, mappedProps)\n\n      this.$watch('componentRestrictions', (v) => {\n        if (v !== undefined) {\n          this.$autocomplete.setComponentRestrictions(v)\n        }\n      })\n\n      // Not using `bindEvents` because we also want\n      // to return the result of `getPlace()`\n      this.$autocomplete.addListener('place_changed', () => {\n        this.$emit('place_changed', this.$autocomplete.getPlace())\n      })\n    })\n  },\n  props: {\n    ...mappedPropsToVueProps(mappedProps),\n    ...props,\n  },\n}\n</script>\n"],"mappings":";;SACkBA,IAAA,CAAAC,MAAM,YACpBC,WAAA,CAA0CF,IAAA,CAAAC,MAAA,WAAAE,eAAA,CAAAC,WAAA;IAAAC,GAAA;EAAA,GAAfL,IAAA,CAAAM,MAAM,M,CAEhBN,IAAA,CAAAC,MAAM,a,cAAzBM,mBAAA,CAAgF,SAAhFH,WAAA,CAAgF;;IAA5CI,GAAG,EAAC;KAAgBR,IAAA,CAAAM,MAAM,EAAEG,WAAA,CAAMT,IAAO,CAAAM,MAAD,wC"},"metadata":{},"sourceType":"module","externalDependencies":[]}