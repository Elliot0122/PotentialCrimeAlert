{"ast":null,"code":"import { DefaultRenderer, MarkerClusterer, SuperClusterAlgorithm } from '@googlemaps/markerclusterer';\nimport buildComponent from './build-component.js';\nconst props = {\n  algorithm: {\n    type: Object,\n    default: new SuperClusterAlgorithm({}),\n    noBind: true\n  },\n  renderer: {\n    type: Object,\n    default: new DefaultRenderer(),\n    noBind: true\n  }\n};\nconst events = ['clusteringbegin', 'clusteringend'];\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'cluster',\n  ctr: () => {\n    if (typeof MarkerClusterer === 'undefined') {\n      const errorMessage = 'MarkerClusterer is not installed!';\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return MarkerClusterer;\n  },\n  ctrArgs: ({\n    map,\n    ...otherOptions\n  }) => [{\n    map,\n    ...otherOptions\n  }],\n  afterCreate(inst) {\n    const reinsertMarkers = () => {\n      const oldMarkers = inst.getMarkers();\n      inst.clearMarkers();\n      inst.addMarkers(oldMarkers);\n    };\n    for (let prop in props) {\n      if (props[prop].twoWay) {\n        this.$on(prop.toLowerCase() + '_changed', reinsertMarkers);\n      }\n    }\n  },\n  updated() {\n    if (this.$clusterObject) {\n      this.$clusterObject.render();\n    }\n  },\n  beforeUnmount() {\n    /* Performance optimization when destroying a large number of markers */\n    if (this.$children && this.$children.length) {\n      this.$children.forEach(marker => {\n        if (marker.$clusterObject === this.$clusterObject) {\n          marker.$clusterObject = null;\n        }\n      });\n    }\n    if (this.$clusterObject) {\n      this.$clusterObject.clearMarkers();\n    }\n  }\n});","map":{"version":3,"names":["DefaultRenderer","MarkerClusterer","SuperClusterAlgorithm","buildComponent","props","algorithm","type","Object","default","noBind","renderer","events","mappedProps","name","ctr","errorMessage","console","error","Error","ctrArgs","map","otherOptions","afterCreate","inst","reinsertMarkers","oldMarkers","getMarkers","clearMarkers","addMarkers","prop","twoWay","$on","toLowerCase","updated","$clusterObject","render","beforeUnmount","$children","length","forEach","marker"],"sources":["/Users/toby/Documents/GitHub/InsightsInAggieland/frontend/node_modules/vue-google-maps-community-fork/src/components/cluster.vue"],"sourcesContent":["<template>\n  <div>\n    <slot></slot>\n  </div>\n</template>\n<script>\nimport {\n  DefaultRenderer,\n  MarkerClusterer,\n  SuperClusterAlgorithm,\n} from '@googlemaps/markerclusterer'\nimport buildComponent from './build-component.js'\n\nconst props = {\n  algorithm: {\n    type: Object,\n    default: new SuperClusterAlgorithm({}),\n    noBind: true,\n  },\n  renderer: {\n    type: Object,\n    default: new DefaultRenderer(),\n    noBind: true,\n  },\n}\n\nconst events = ['clusteringbegin', 'clusteringend']\n\nexport default buildComponent({\n  mappedProps: props,\n  events,\n  name: 'cluster',\n  ctr: () => {\n    if (typeof MarkerClusterer === 'undefined') {\n      const errorMessage = 'MarkerClusterer is not installed!'\n      console.error(errorMessage)\n      throw new Error(errorMessage)\n    }\n    return MarkerClusterer\n  },\n  ctrArgs: ({ map, ...otherOptions }) => [{ map, ...otherOptions }],\n  afterCreate(inst) {\n    const reinsertMarkers = () => {\n      const oldMarkers = inst.getMarkers()\n      inst.clearMarkers()\n      inst.addMarkers(oldMarkers)\n    }\n    for (let prop in props) {\n      if (props[prop].twoWay) {\n        this.$on(prop.toLowerCase() + '_changed', reinsertMarkers)\n      }\n    }\n  },\n  updated() {\n    if (this.$clusterObject) {\n      this.$clusterObject.render()\n    }\n  },\n  beforeUnmount() {\n    /* Performance optimization when destroying a large number of markers */\n    if (this.$children && this.$children.length) {\n      this.$children.forEach((marker) => {\n        if (marker.$clusterObject === this.$clusterObject) {\n          marker.$clusterObject = null\n        }\n      })\n    }\n\n    if (this.$clusterObject) {\n      this.$clusterObject.clearMarkers()\n    }\n  },\n})\n</script>\n"],"mappings":"AAMA,SACEA,eAAe,EACfC,eAAe,EACfC,qBAAqB,QAChB,6BAA4B;AACnC,OAAOC,cAAa,MAAO,sBAAqB;AAEhD,MAAMC,KAAI,GAAI;EACZC,SAAS,EAAE;IACTC,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE,IAAIN,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACtCO,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRJ,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE,IAAIR,eAAe,CAAC,CAAC;IAC9BS,MAAM,EAAE;EACV;AACF;AAEA,MAAME,MAAK,GAAI,CAAC,iBAAiB,EAAE,eAAe;AAElD,eAAeR,cAAc,CAAC;EAC5BS,WAAW,EAAER,KAAK;EAClBO,MAAM;EACNE,IAAI,EAAE,SAAS;EACfC,GAAG,EAAEA,CAAA,KAAM;IACT,IAAI,OAAOb,eAAc,KAAM,WAAW,EAAE;MAC1C,MAAMc,YAAW,GAAI,mCAAkC;MACvDC,OAAO,CAACC,KAAK,CAACF,YAAY;MAC1B,MAAM,IAAIG,KAAK,CAACH,YAAY;IAC9B;IACA,OAAOd,eAAc;EACvB,CAAC;EACDkB,OAAO,EAAEA,CAAC;IAAEC,GAAG;IAAE,GAAGC;EAAa,CAAC,KAAK,CAAC;IAAED,GAAG;IAAE,GAAGC;EAAa,CAAC,CAAC;EACjEC,WAAWA,CAACC,IAAI,EAAE;IAChB,MAAMC,eAAc,GAAIA,CAAA,KAAM;MAC5B,MAAMC,UAAS,GAAIF,IAAI,CAACG,UAAU,CAAC;MACnCH,IAAI,CAACI,YAAY,CAAC;MAClBJ,IAAI,CAACK,UAAU,CAACH,UAAU;IAC5B;IACA,KAAK,IAAII,IAAG,IAAKzB,KAAK,EAAE;MACtB,IAAIA,KAAK,CAACyB,IAAI,CAAC,CAACC,MAAM,EAAE;QACtB,IAAI,CAACC,GAAG,CAACF,IAAI,CAACG,WAAW,CAAC,IAAI,UAAU,EAAER,eAAe;MAC3D;IACF;EACF,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACC,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACC,MAAM,CAAC;IAC7B;EACF,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd;IACA,IAAI,IAAI,CAACC,SAAQ,IAAK,IAAI,CAACA,SAAS,CAACC,MAAM,EAAE;MAC3C,IAAI,CAACD,SAAS,CAACE,OAAO,CAAEC,MAAM,IAAK;QACjC,IAAIA,MAAM,CAACN,cAAa,KAAM,IAAI,CAACA,cAAc,EAAE;UACjDM,MAAM,CAACN,cAAa,GAAI,IAAG;QAC7B;MACF,CAAC;IACH;IAEA,IAAI,IAAI,CAACA,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACP,YAAY,CAAC;IACnC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}